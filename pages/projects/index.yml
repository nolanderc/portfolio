---
template: index.hbs
data: data.yml
markdown:
    matjakt: |
        Search for the cheapest foodstuffs in stores all around Sweden. 

        Compare millions of prices across 250+ stores to find the best deals
        and save money. Prices are automatically fetched from some of the
        largest food-retailers in Sweden (currently Ica and Hemk√∂p).

        Behind the scenes you will find all kinds of wonders:

        - a fast search algorithm that corrects for spelling errors
        - high performance asynchronous servers
        - efficient image recognition algorithms
        - and much more...

    voxel-ray-tracer: |
        Display ray traced voxel environments in real-time.

        Complex voxel environments can be dynamically loaded onto a GPU and be
        ray-traced in real-time thanks to an efficient Octree traversal
        algorithm of my design.

        There's currently support for voxels of different colors, camera
        movement and shadows!

    rust-postgres-query: |
        Statically typed SQL queries with readable parameter names.  

        An open source Rust library which enable the declaration of
        type-checked SQL queries with named parameters.

    kattis-client: |
        A client for Kattis, the online competitive programming judge. 

        This client can submit solutions, manage user code templates and
        automatically tests the user's code against sample test cases found in
        the problem statement.

    n--: |
        A clone of the game with a similar name: N++.

        This was my final project for the programming course in High School.
        It features a level editor, a particle system and a simple physics engine.

    washem: |
        A WebAssembly (WASM) interpreter.
        
        It closely follows the official WebAssembly 1.0 specification. Although
        complete conformance has not been verified, it functions as intended.
        
        Being an interpreter, performance will never reach what is possible by
        running code natively. Without any sort of JIT optimizations this
        interpreter runs roughly 80 times slower than native code, which is
        respectable considering the low level nature of WebAssembly combined
        with its security guarantees.

